package com.appbytes.beautywallpaper.util.extentions

import android.content.ContentResolver
import android.content.ContentValues
import android.net.Uri
import android.provider.MediaStore
import android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream

object MediaStoreExtensions {
    fun insertImage(cr: ContentResolver, filePath: String, title: String?, desc: String?): Uri? {
        val file = File(filePath)
        if (!file.exists()) {
            return null
        }

        val values = ContentValues()
        values.put(MediaStore.Images.Media.DISPLAY_NAME, file.name)
        values.put(MediaStore.Images.Media.TITLE, title)
        values.put(MediaStore.Images.Media.DESCRIPTION, desc)
        values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg") //todo extract mime types
        values.put(MediaStore.MediaColumns.SIZE, file.length())
        values.put(MediaStore.Images.Media.DATE_TAKEN, System.currentTimeMillis())
        values.put(MediaStore.Images.Media.DATE_ADDED, System.currentTimeMillis() / 1000)

        val uri = cr.insert(EXTERNAL_CONTENT_URI, values) ?: return null

        // Since we want to persist the file to shared collection,
        // we do not manually insert the DATA column.
        // NOTE: the bucket id & name is auto generated by system, thus
        // by doing this, you will see the images in Picture/ dir.
        transfer(cr, File(filePath), uri)

        return uri
    }

    private fun transfer(cr: ContentResolver, srcFile: File, outUri: Uri): Boolean {
        val outputFileDescriptor = cr.openFileDescriptor(
                outUri, "w")?.fileDescriptor ?: return false

        val inputFileDescriptor = cr.openFileDescriptor(
                Uri.fromFile(srcFile), "r")?.fileDescriptor ?: return false

        try {
            val fos = FileOutputStream(outputFileDescriptor)
            val fis = FileInputStream(inputFileDescriptor)

            val outputChannel = fos.channel
            val inputChannel = fis.channel

            outputChannel.use { oc ->
                inputChannel.use { ic ->
                    ic.transferTo(0, ic.size(), oc)
                }
            }
        } catch (e: Exception) {
            return false
        }

        return true
    }
}